[
    {
        "id": "ReadFunc",
        "description": " An entry point in the pipeline.\n    Reads an input file and a yml file describing the D-REPR layout of this file.\n    The data are representated in a Graph object.\n    ",
        "inputs": {
            "repr_file": {
                "id": "file_path",
                "val": null,
                "optional": false
            },
            "resources": {
                "id": "string",
                "val": null,
                "optional": false
            }
        },
        "outputs": {
            "data": {
                "id": "graph",
                "val": null,
                "optional": false
            }
        },
        "func_type": "Reader",
        "friendly_name": "Local File Reader",
        "example": {
            "repr_file": "./wfp_food_prices_south-sudan.repr.yml",
            "resources": "./wfp_food_prices_south-sudan.csv"
        }
    },
    {
        "id": "DcatReadFunc",
        "description": " An entry point in the pipeline.\n    Fetches a dataset and its metadata from the MINT Data-Catalog.\n    ",
        "inputs": {
            "dataset_id": {
                "id": "string",
                "val": null,
                "optional": false
            }
        },
        "outputs": {
            "data": {
                "id": "graph",
                "val": null,
                "optional": false
            }
        },
        "func_type": "Reader",
        "friendly_name": "Data Catalog Reader",
        "example": {
            "dataset_id": "05c43c58-ed42-4830-9b1f-f01059c4b96f"
        }
    },
    {
        "id": "DcatReadNoReprFunc",
        "description": " An entry point in the pipeline.\n    Fetches a dataset and its metadata from the MINT Data-Catalog.\n    ",
        "inputs": {
            "dataset_id": {
                "id": "string",
                "val": null,
                "optional": false
            }
        },
        "outputs": {
            "data": {
                "id": "string",
                "val": null,
                "optional": false
            }
        },
        "func_type": "Reader",
        "friendly_name": " Data Catalog Reader Without repr File",
        "example": {
            "dataset_id": "05c43c58-ed42-4830-9b1f-f01059c4b96f"
        }
    },
    {
        "id": "UnitTransFunc",
        "description": " A transformation adapter.\n    Alters the graph by performing unit conversion on some values in the graph.\n    ",
        "inputs": {
            "graph": {
                "id": "graph",
                "val": null,
                "optional": false
            },
            "unit_value": {
                "id": "string",
                "val": null,
                "optional": false
            },
            "unit_label": {
                "id": "string",
                "val": null,
                "optional": false
            },
            "unit_desired": {
                "id": "string",
                "val": null,
                "optional": false
            },
            "filter": {
                "id": "string",
                "val": null,
                "optional": true
            }
        },
        "outputs": {
            "graph": {
                "id": "graph",
                "val": null,
                "optional": false
            }
        },
        "func_type": "Unit Transformation",
        "friendly_name": "Unit Transformation Function",
        "example": {
            "unit_value": "dcat: measure_1_value",
            "unit_label": "sdmx-attribute:unitMeasure",
            "unit_desired": "$/kg",
            "filter": "@type = 'qb:Observation' and sdmx-attribute:refArea.contains('Aweil (Town)')"
        }
    },
    {
        "id": "GraphWriteFunc",
        "description": " A writer adapter.\n    Generates a csv/json file.\n    ",
        "inputs": {
            "graph": {
                "id": "graph",
                "val": null,
                "optional": false
            },
            "main_class": {
                "id": "string",
                "val": null,
                "optional": false
            },
            "output_file": {
                "id": "string",
                "val": null,
                "optional": false
            },
            "filter": {
                "id": "string",
                "val": null,
                "optional": true
            }
        },
        "outputs": {
            "output_file": {
                "id": "string",
                "val": null,
                "optional": false
            }
        },
        "func_type": "Writer",
        "friendly_name": "Graph to CSV/JSON",
        "example": {
            "main_class": "qb:Observation",
            "output_file": "./price-test.csv",
            "mapped_columns": "{}",
            "filter": "@type = 'qb:Observation' and sdmx-attribute:refArea.contains('Aweil (Town)')"
        }
    },
    {
        "id": "VisJsonWriteFunc",
        "description": " A writer adapter.\n    Generates a json file following the format of the MINT-Data-Catalog Visualizer.\n    ",
        "inputs": {
            "graph": {
                "id": "graph",
                "val": null,
                "optional": false
            },
            "main_class": {
                "id": "string",
                "val": null,
                "optional": false
            },
            "output_file": {
                "id": "file_path",
                "val": null,
                "optional": false
            },
            "mapped_columns": {
                "id": "ordered_dict",
                "val": null,
                "optional": null
            },
            "filter": {
                "id": "string",
                "val": null,
                "optional": true
            }
        },
        "outputs": {
            "data": {
                "id": "string",
                "val": null,
                "optional": false
            }
        },
        "func_type": "Writer",
        "friendly_name": "Graph to JSON Converter and Visualizer",
        "example": {
            "main_class": "qb:Observation",
            "output_file": "./price-test.csv",
            "mapped_columns": "{}",
            "filter": "@type = 'qb:Observation' and sdmx-attribute:refArea.contains('Aweil (Town)')"
        }
    },
    {
        "id": "GraphStr2StrFunc",
        "description": " A transformation adapter.\n    Maps an existing set of strings (semantic attributes) to a new desired set of strings.\n    ",
        "inputs": {
            "graph": {
                "id": "graph",
                "val": null,
                "optional": false
            },
            "semantic_type": {
                "id": "string",
                "val": null,
                "optional": false
            },
            "str2str": {
                "id": "string",
                "val": null,
                "optional": false
            }
        },
        "outputs": {},
        "func_type": "Other Transformation",
        "friendly_name": "Semantic Attributes Mapper",
        "example": {
            "semantic_type": "qb:Observation--dcat-dimension:thing",
            "str2str": "ujson.dumps({\"Maize (white) - Retail\": \"maize\"})"
        }
    },
    {
        "id": "MergeFunc",
        "description": " A transformation adapter.\n    Merges two graphs into one.\n    ",
        "inputs": {
            "graph1": {
                "id": "graph",
                "val": null,
                "optional": false
            },
            "graph2": {
                "id": "graph",
                "val": null,
                "optional": false
            }
        },
        "outputs": {
            "data": {
                "id": "graph",
                "val": null,
                "optional": false
            }
        },
        "func_type": "Other Transformation",
        "friendly_name": "Merge Two Graphs Into One",
        "example": {}
    },
    {
        "id": "Topoflow4ClimateWriteFunc",
        "description": " A reader-transformation-writer multi-adapter.\n    Creates an RTS (and RTI) file from NetCDF (climate) files.\n    ",
        "inputs": {
            "input_dir": {
                "id": "string",
                "val": null,
                "optional": false
            },
            "temp_dir": {
                "id": "string",
                "val": null,
                "optional": false
            },
            "output_file": {
                "id": "string",
                "val": null,
                "optional": false
            },
            "var_name": {
                "id": "string",
                "val": null,
                "optional": false
            },
            "DEM_bounds": {
                "id": "string",
                "val": null,
                "optional": false
            },
            "DEM_xres_arcsecs": {
                "id": "string",
                "val": null,
                "optional": false
            },
            "DEM_yres_arcsecs": {
                "id": "string",
                "val": null,
                "optional": false
            }
        },
        "outputs": {
            "output_file": {
                "id": "string",
                "val": null,
                "optional": false
            }
        },
        "func_type": "Model Specific Transformation",
        "friendly_name": "Topoflow Climate File Writer",
        "example": {
            "input_dir": "$.my_dcat_read_func.data",
            "temp_dir": "/data/mint/sample_grid_baro",
            "output_file": "/data/mint/sample_baro/climate_all.rt",
            "var_name": "HQprecipitation",
            "DEM_bounds": "34.221249999999, 7.362083333332, 36.446249999999, 9.503749999999",
            "DEM_xres_arcsecs": "30",
            "DEM_yres_arcsecs": "30"
        }
    },
    {
        "id": "Topoflow4ClimateWritePerMonthFunc",
        "description": " A reader-transformation-writer multi-adapter.\n    Creates RTS (and RTI) files per month from NetCDF (climate) files.\n    ",
        "inputs": {
            "grid_dir": {
                "id": "string",
                "val": null,
                "optional": false
            },
            "date_regex": {
                "id": "string",
                "val": null,
                "optional": false
            },
            "output_file": {
                "id": "file_path",
                "val": null,
                "optional": false
            }
        },
        "outputs": {},
        "func_type": "Model Specific Transformation",
        "friendly_name": "Topoflow Climate Per Month File Writer",
        "example": {
            "grid_dir": "/data/mint/gpm_grid_baro",
            "date_regex": "3B-HHR-E.MS.MRG.3IMERG.(?P<year>\\d{4})(?P<month>\\d{2})(?P<day>\\d{2})",
            "output_file": "/data/mint/baro/climate.rts"
        }
    },
    {
        "id": "Topoflow4SoilWriteFunc",
        "description": " A reader-transformation-writer multi-adapter.\n    Creates Bin (and RTI) files from tiff (soil) files.\n    ",
        "inputs": {
            "input_dir": {
                "id": "string",
                "val": null,
                "optional": false
            },
            "output_dir": {
                "id": "file_path",
                "val": null,
                "optional": false
            },
            "layer": {
                "id": "string",
                "val": null,
                "optional": false
            },
            "DEM_bounds": {
                "id": "string",
                "val": null,
                "optional": false
            },
            "DEM_xres_arcsecs": {
                "id": "string",
                "val": null,
                "optional": false
            },
            "DEM_yres_arcsecs": {
                "id": "string",
                "val": null,
                "optional": false
            }
        },
        "outputs": {},
        "func_type": "Model Specific Transformation",
        "friendly_name": "Topoflow Soil File Writer",
        "example": {
            "input_dir": "/ws/oct_eval_data/soilGrids/",
            "output_dir": "/ws/examples/scotts_transformations/tmp/soil_BARO_l1",
            "layer": "5",
            "DEM_bounds": "34.221249999999, 7.362083333332, 36.446249999999, 9.503749999999",
            "DEM_xres_arcsecs": "30",
            "DEM_yres_arcsecs": "30"
        }
    },
    {
        "id": "NC2GeoTiff",
        "description": "Convert all netcdf file in one folder to geotiff file in another folder",
        "inputs": {
            "input_dir": {
                "id": "string",
                "val": null,
                "optional": false
            },
            "output_dir": {
                "id": "string",
                "val": null,
                "optional": false
            },
            "var_name": {
                "id": "string",
                "val": null,
                "optional": false
            },
            "no_data": {
                "id": "number",
                "val": null,
                "optional": false
            }
        },
        "outputs": {},
        "func_type": "Writer",
        "friendly_name": "Netcdf to Geotiff Converter",
        "example": {
            "input_dir": "/path/to/input/file",
            "output_dir": "/path/to/output/file",
            "var_name": "some_variable_name",
            "no_data": "0.0"
        }
    },
    {
        "id": "DcatWriteFunc",
        "description": " A writer adapter.\n    Write files to DCAT.\n    ",
        "inputs": {
            "resource_path": {
                "id": "string",
                "val": null,
                "optional": false
            },
            "metadata": {
                "id": "string",
                "val": null,
                "optional": false
            }
        },
        "outputs": {
            "data": {
                "id": "string",
                "val": null,
                "optional": false
            }
        },
        "func_type": "Writer",
        "friendly_name": "Data Catalog Writer",
        "example": {
            "resource_path": "$.my_graph_write_func.output_file",
            "metadata": "[{\"name\": \"WFP Food Prices - South Sudan\", \"description\": \"Food price dataset for South Sudan (2012-2019)\"}]"
        }
    }
]