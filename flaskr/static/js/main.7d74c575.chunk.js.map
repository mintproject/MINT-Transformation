{"version":3,"sources":["images/dt_flow.jpg","store/AdapterStore.ts","store/PipelineStore.ts","store/ErrorStore.ts","store/index.ts","serviceWorker.ts","components/NotFound404.tsx","components/Layout.tsx","components/Home.tsx","components/Adapters.tsx","components/PipelineTimeline.tsx","components/PipelineDetail.tsx","components/CreatePipeline.tsx","App.tsx","index.tsx"],"names":["module","exports","flaskUrl","AdapterStore","action","bound","errorStore","this","observable","axios","get","then","resp","adapters","data","console","log","PipelineStore","isLoading","hasFailed","errorData","Promise","resolve","startFetch","pipelines","successFetch","error","failedFetch","response","pipelineId","currentPipeline","uploadedPipelineData","dcatId","graphCreated","pipelineName","pipelineDescription","graphNodes","graphEdges","post","name","description","nodes","edges","ErrorStore","routingStore","RouterStore","stores","routing","pipelineStore","adapterStore","history","syncHistoryWithStore","createBrowserHistory","Boolean","window","location","hostname","match","NotFound404","style","textAlign","React","Component","Header","Layout","Content","Footer","Search","Input","MyLayout","inject","observer","state","selectedKey","children","props","className","height","theme","mode","openKeys","lineHeight","onClick","key","setState","Item","to","float","placeholder","onSearch","value","padding","background","minHeight","overflow","size","message","type","color","JSON","stringify","verticalAlign","Title","Typography","Paragraph","HomeComponent","fontSize","span","src","dtFlow","alt","defaultProps","AdapterComponent","getAdapters","isCardLoading","length","map","ad","index","title","id","bordered","loading","margin","hoverable","_","isEmpty","inputs","Object","keys","inputKey","idx","readOnly","optional","outputs","outputKey","PipelineTimelineComponent","getPipelines","timestampDropdownMenu","statusColorCode","running","finished","failed","Fragment","align","overlay","icon","content","shape","pl","status","level","end_timestamp","start_timestamp","disabled","marginRight","PipelineComponent","getPipeline","openConfig","openOutput","params","visible","onOk","onCancel","config","output","split","op","trim","TextArea","TabPane","Tabs","GraphConfig","NodeTypes","empty","typeText","shapeId","viewBox","x","y","width","NodeSubtypes","EdgeTypes","emptyEdge","cx","cy","r","fill","CreatePipelineComponent","createPipeline","setGraphCreated","setUploadedPipelineData","setUploadedPipelineFromDcat","currentFileList","selected","currentAction","currentAdapter","currentToNode","fromNodeOutput","toNodeInput","currentAdapterName","handleFileChange","info","file","fileList","slice","createGraphEdges","createGraphNodes","handleSubmit","createNodes","createEdges","push","handleCancel","n","adapter","currAdapter","filter","findBoundingBoxGraphNodes","maxX","Number","NEGATIVE_INFINITY","maxY","minX","POSITIVE_INFINITY","minY","maxId","i","nodeX","nodeY","e","source","target","input","onUpdateNode","node","v","createAdapterMenu","item","createFromNodeOutputMenu","selectedAdapter","k","createToNodeMenu","createToNodeInputMenu","createNodeEdgeMenu","nodeEdges","updates","onClear","isAlphaNumericUnderscore","check","subStrings","search","queryString","parse","prevProps","selectedNode","defaultActiveKey","overflowY","tab","onChange","newNode","newNodes","newEdges","ref","nodeKey","nodeTypes","nodeSubtypes","edgeTypes","onSelectNode","onCreateNode","onDeleteNode","onSelectEdge","onCreateEdge","onSwapEdge","onDeleteEdge","renderNodeText","isSelected","customName","textAnchor","dy","opacity","renderNode","fillOpacity","maxZoom","ip","wiredEdges","border","borderRadius","required","val","event","currentTarget","rows","marginTop","Dragger","accept","multiple","App","exact","path","component","Home","Adapters","PipelineTimeline","PipelineDetail","CreatePipeline","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d74c575.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dt_flow.18cbb62c.jpg\";","import { observable, action } from \"mobx\";\nimport axios from \"axios\";\nimport { ErrorStore } from \"./ErrorStore\";\n\n// FIXME: adapter comes from JSON, not db?\n// pipeline serialization should agree with above json\n// integrate front end and back end :/\nexport type AdapterType = {\n  id: string,\n  description: string,\n  inputs: { [key: string]: AdapterInputType; },\n  outputs: { [key: string]: AdapterInputType; }\n};\n\nexport type AdapterInputType = {\n  id: string,\n  optional: boolean,\n  val: string | null,\n}\n\n// FIXME: should pass in backend url via env var\nexport const flaskUrl = \"http://localhost:5000/api\"\n\nexport class AdapterStore {\n  constructor(errorStore: ErrorStore) {\n    this.errorStore = errorStore;\n  }\n\n  errorStore: ErrorStore\n  @observable adapters: AdapterType[] = [];\n\n  @action.bound getAdapters = () => {\n    axios.get(`${flaskUrl}/adapters`).then(\n      (resp) => {\n        if (\"data\" in resp) {\n          this.adapters = resp.data;\n        } else {\n          console.log(\"THERE IS SOMETHING WRONG!\");\n        }\n      }\n    );\n  }\n}","import { observable, action } from \"mobx\";\nimport axios from \"axios\";\nimport { AdapterType, flaskUrl, AdapterInputType } from \"./AdapterStore\";\nimport { ErrorStore } from \"./ErrorStore\";\n\n// FIXME: settle down on the final format of pipeline object:\n// metadata + list of adapters?\nexport type PipelineType = {\n  name: string,\n  description: string,\n  start_timestamp: string,\n  status: string,\n  end_timestamp: string,\n  config: string,\n  id: string,\n  adapters?: AdapterType[],\n  output?: string\n};\n\nexport type UploadedPipelineDataType = {\n  nodes: NodeType[],\n  edges: EdgeType[]\n}\n\nexport type NodeType = {\n  id: number,\n  adapter: string,\n  // comment: string\n  inputs: AdapterInputType[],\n  outputs: AdapterInputType[],\n  comment?: string\n}\n\nexport type EdgeType = {\n  source: string,\n  target: string,\n  input: string,\n  output: string,\n}\n\nexport class PipelineStore {\n  constructor(errorStore: ErrorStore) {\n    this.errorStore = errorStore;\n  }\n\n  errorStore: ErrorStore\n  @observable pipelines: PipelineType[] = [];\n  @observable currentPipeline: PipelineType | null = null;\n  @observable uploadedPipelineData: UploadedPipelineDataType | null = null;\n  @observable graphCreated: boolean = false;\n\n  @action.bound startFetch = () => {\n    this.errorStore.isLoading = true;\n    console.log(\"inside start fetch!\");\n  }\n\n  @action.bound successFetch = () => {\n    this.errorStore.isLoading = false;\n    this.errorStore.hasFailed = false;\n    console.log(\"inside success fetch!\");\n  }\n\n  @action.bound failedFetch = (errorData: Error) => {\n    console.log(\"inside failed fetch!\");\n    this.errorStore.isLoading = false;\n    this.errorStore.hasFailed = true;\n    this.errorStore.errorData = errorData;\n  }\n\n  @action.bound getPipelines = () => {\n    Promise.resolve().then(this.startFetch).then(() =>\n      axios.get(`${flaskUrl}/pipelines`)\n      .then(\n        resp => {\n          this.pipelines = resp.data;\n          this.successFetch();\n        },\n        error => {\n          this.failedFetch(error.response);\n          /* \n          if (error.response) {\n              // The request was made and the server responded with a\n              // status code that falls out of the range of 2xx\n              console.log(error.response.data);\n              console.log(error.response.status);\n              console.log(error.response.headers);\n          } else if (error.request) {\n              //  * The request was made but no response was received, `error.request`\n              //  * is an instance of XMLHttpRequest in the browser and an instance\n              //  * of http.ClientRequest in Node.js\n              console.log(error.request);\n          } else {\n              // Something happened in setting up the request and triggered an Error\n              console.log('Error', error.message);\n          }\n          console.log(error.config);\n          */\n      })\n    )\n  }\n\n  @action.bound getPipeline = (pipelineId: string) => {\n    Promise.resolve().then(this.startFetch).then(() =>\n      axios.get(`${flaskUrl}/pipelines/${pipelineId}`)\n      .then(\n        resp => {\n          this.currentPipeline = resp.data;\n          this.successFetch();\n        },\n        error => {\n          this.failedFetch(error);\n    }));\n  }\n\n  @action.bound setUploadedPipelineData = (uploadedPipelineData: UploadedPipelineDataType | null) => {\n    this.uploadedPipelineData = uploadedPipelineData;\n  }\n\n  @action.bound setUploadedPipelineFromDcat = (dcatId: string) => {\n    Promise.resolve().then(this.startFetch).then(() =>\n      axios.get(`${flaskUrl}/pipeline/dcat/${dcatId}`)\n      .then(\n        resp => {\n          this.uploadedPipelineData = resp.data.data;\n          this.graphCreated = true;\n          this.successFetch();\n        },\n        error => {\n          this.failedFetch(error);\n    }));\n  }\n\n  @action.bound setGraphCreated = (graphCreated: boolean) => {\n    this.graphCreated = graphCreated;\n  }\n\n  @action.bound createPipeline = (\n    pipelineName: string, pipelineDescription: string,\n    graphNodes: NodeType[], graphEdges: EdgeType[]\n  ) => {\n    Promise.resolve().then(this.startFetch).then(() =>\n      axios.post(`${flaskUrl}/pipeline/create`, {\n        name: pipelineName,\n        description: pipelineDescription,\n        nodes: graphNodes,\n        edges: graphEdges\n      }).then(\n        resp => {\n          this.successFetch();\n        },\n        error => {\n          this.failedFetch(error);\n    }));\n  }\n};\n","import { observable, action } from \"mobx\";\n// import axios from \"axios\";\n\nexport class ErrorStore {\n  @observable isLoading: boolean = false;\n  @observable hasFailed: boolean = false;\n  @observable errorData: object = {};\n\n  @action.bound setIsLoading = (isLoading: boolean) => {\n    this.isLoading = isLoading;\n  }\n\n  @action.bound setHasFailed = (hasFailed: boolean) => {\n    this.hasFailed = hasFailed;\n  }\n\n  @action.bound setErrorData = (errorData: object) => {\n    this.errorData = errorData;\n  }\n\n}","import { createBrowserHistory } from \"history\";\nimport { RouterStore, syncHistoryWithStore } from \"mobx-react-router\";\nimport { PipelineStore } from \"./PipelineStore\";\nimport { AdapterStore } from \"./AdapterStore\";\nimport { ErrorStore } from \"./ErrorStore\";\n// import { autorun } from \"mobx\";\n\nexport const routingStore = new RouterStore();\nconst errorStore = new ErrorStore();\nexport const stores = {\n  routing: routingStore,\n  pipelineStore: new PipelineStore(errorStore),\n  adapterStore: new AdapterStore(errorStore),\n  errorStore: errorStore\n}\n// autorun(() => {\n//   console.log(\"HERE is the uploadedPipeline!\");\n//   console.log(stores.app.uploadedPipeline);\n// })\n\n\nexport type IStore = Readonly<typeof stores>;\nexport const history = syncHistoryWithStore(\n  createBrowserHistory(),\n  routingStore\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nexport default class NotFound404 extends React.Component {\n  render() {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <h1>404 Resource Not Found</h1>\n      </div>\n    );\n  }\n}\n","import * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {  Menu, Layout, Input, Alert, Spin } from 'antd';\nimport { inject, observer } from \"mobx-react\";\nimport { IStore } from \"../store\";\nconst { Header, Content, Footer } = Layout;\nconst { Search } = Input;\n\ntype LayoutProps = {\n  children?: any,\n  isLoading?: boolean,\n  hasFailed?: boolean,\n  errorData?: object\n};\n\ntype LayoutState = {\n  selectedKey: string\n};\n\n@inject((stores: IStore) => ({\n  isLoading: stores.errorStore.isLoading,\n  hasFailed: stores.errorStore.hasFailed,\n  errorData: stores.errorStore.errorData,\n}))\n@observer\nexport default class MyLayout extends React.Component<LayoutProps> {\n  state: Readonly<LayoutState> = {\n    selectedKey: \"\"\n  }\n\n  render() {\n    const { children } = this.props;\n\n    // FIXME: onClick and highlight is not consistent\n    return (\n      <Layout className=\"layout\" style={{ height: \"100%\" }}>\n        <Header>\n        <Menu\n          theme=\"dark\"\n          mode=\"horizontal\"\n          openKeys={[this.state.selectedKey ? this.state.selectedKey : \"home-page\"]}\n          style={{ lineHeight: '64px' }}\n          onClick={({ key }) => this.setState({\n            selectedKey: key\n          })}\n        >\n          <Menu.Item key=\"home\">\n            <Link to={\"/\"}>\n              MINT DT\n            </Link>\n          </Menu.Item> \n          <Menu.Item key=\"home-page\" onClick={() => this.setState({\n              selectedKey: \"home-page\"\n            })}>\n            <Link to={\"/\"} onClick={() => this.setState({\n              selectedKey: \"home-page\"\n            })}>\n              Home\n            </Link>\n          </Menu.Item> \n          <Menu.Item key=\"adapters\">\n            <Link to={\"/adapters\"}>\n              Adapters\n            </Link>\n          </Menu.Item> \n          <Menu.Item key=\"pipelines\">\n            <Link to={\"/pipelines\"}>\n              Pipeline\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"create-pipeline\">\n            <Link to={\"/pipeline/create\"}>\n              Create Pipeline\n            </Link>\n          </Menu.Item>\n          <Menu.Item style={{ float: \"right\" }}>\n            <Search\n              placeholder=\"Search MINT DT!\"\n              onSearch={value => console.log(value)}\n            />\n          </Menu.Item>\n        </Menu>\n        </Header>\n        <Content style={{ padding: '30px 50px' }}>\n        <div style={{ background: '#fff', padding: 24, minHeight: 400, height: \"100%\", overflow: \"auto\" }}>\n          {this.props.isLoading ? <Spin size=\"large\" style={{ textAlign: \"center\" }}>\n            <Alert\n              message=\"Loading pipeline history\"\n              description=\"Right now is really slow :/\"\n              type=\"info\"\n            />\n          </Spin> : null}\n          {this.props.hasFailed ? <pre>\n            <b><u style={{ color: \"red\" }}>Oops! Some error has occurred! Refresh the page to try again!</u></b><br/><br/>\n            {JSON.stringify(this.props.errorData, null, 2)}\n          </pre> : null}\n          {!this.props.isLoading && !this.props.hasFailed ? children : null}\n         </div>\n        </Content>\n        <Footer style={{ textAlign: 'center', verticalAlign: \"bottom\" }}>MINT ©2020 Created by USC ISI</Footer>\n      </Layout>\n    );\n  }\n}","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { IStore } from \"../store\";\nimport MyLayout from \"./Layout\";\nimport dtFlow from '../images/dt_flow.jpg';\nimport { Typography, Row, Col } from 'antd';\nconst { Title, Paragraph, } = Typography;\n\nconst defaultProps = {};\ninterface HomeProps extends Readonly<typeof defaultProps> {\n}\ninterface HomeState {}\n\n@inject((stores: IStore) => ({\n}))\n@observer\nexport class HomeComponent extends React.Component<\n  HomeProps,\n  HomeState\n> {\n  public static defaultProps = defaultProps;\n  public state: HomeState = {};\n\n  render() {\n    return (\n      <MyLayout>\n        <Typography>\n          <Title>\n            Welcome to MINT-DT<br/>\n            <span style={{color: \"purple\", fontSize: \"0.9em\"}}><i> A framework to construct a transformation pipeline based on a given specification</i></span><br/>\n          </Title>\n          {/* FIXME: <h1>HOME</h1>\n          <h1>{this.props.a}</h1>\n          <Button type=\"danger\" onClick={this.props.app.setA}>Click Me</Button> */}\n          <Row>\n            <Col span={16}>\n              <Paragraph style={{textAlign: \"left\", fontSize: \"1.0em\"}}>\n                The idea is that we use <span style={{ color: \"blue\" }}>smaller components</span> (we refer to them as <b>adapters</b> or building blocks) which we ’concatenate’ to form a transformation flow (a \"pipeline\"). This modular design allows us to <span style={{ color: \"blue\" }}>reuse</span> existing modules and <span style={{ color: \"blue\" }}>wrap ready-scripts</span> to create a <span style={{ color: \"blue\" }}>language-and-format-independent module</span> and <span style={{ color: \"blue\" }}>pipeline</span>.<br/>\n                There are three types of components (adapters):<br/>\n                • <b><u>Reader Adapter</u></b>. Used as an entry point in the pipeline. It reads an input file (data) and a description of it (D-REPR language).<br/>\n                • <b><u>Transformation Adapter</u></b>. A class which performs a trans- formation done in a form of an API endpoint (remote or local) or an in-code script or library (i.e. using python or R). It does not materialize the data into an output, it just reproduces the data.<br/>\n                • <b><u>Writer Adapter</u></b>. Used as an exit point in the pipeline. It writes an output file based on a description file (D-REPR language).<br/>\n                Each adapter is declared using a semantic description of its attributes (i.e. inputs and outputs). The description enables input data validation and compatibility checking between the concatenated adapters and allows an easier construction of the transformation pipeline based on some simple input from the user.<br/>\n                The figure on the right depicts the general idea of our architecture that is based on building-blocks and components that can be concatenated. In the figure we show a simplified scheme of a transformation pipeline involving a reader adapter, two transformation adapters (’TA’) and a writer adapter.<br/>\n                <i>As an example, a <span style={{ color: \"blue\" }}>reader adapter</span> may be a CSV-file-reader that encodes the file's content to an intermediate representation. A <span style={{ color: \"purple\" }}>transformation adapter</span> may perform unit conversions on the data. Other components, such as Wrap and GraphStr2Str, are used to join and reformat the same resource without changing the actual content of the data. A <span style={{ color: \"purple\" }}>writer adapter</span> will materialize the output data to some other format, i.e. a NetCDF4 file.</i><br/>\n              </Paragraph>\n            </Col>\n            <Col span={4}>\n              <img src={dtFlow} alt=\"\"/>\n            </Col>\n          </Row>\n        </Typography>\n      </MyLayout>\n    );\n  }\n}\n\nexport default HomeComponent;\n","import React from \"react\";\nimport MyLayout from \"./Layout\";\nimport { observer, inject } from \"mobx-react\";\nimport { IStore } from \"../store\";\nimport { Card } from 'antd';\nimport { AdapterType } from \"../store/AdapterStore\";\nimport _ from \"lodash\";\n\nconst defaultProps = {};\ninterface AdapterProps extends Readonly<typeof defaultProps> {\n  adapters: AdapterType[],\n  getAdapters: () => any,\n}\ninterface AdapterState {\n}\n\n@inject((stores: IStore) => ({\n  adapters: stores.adapterStore.adapters,\n  getAdapters: stores.adapterStore.getAdapters,\n}))\n@observer\nexport class AdapterComponent extends React.Component<\n  AdapterProps,\n  AdapterState\n> {\n  public static defaultProps = defaultProps;\n  public state: AdapterState = {\n  };\n\n  componentDidMount() {\n    this.props.getAdapters();\n  }\n\n\n  render() {\n    // this component renders all existing adapters\n    // TODO: similar UI between adapters and pipeline?\n    // FIXME: not exactly sure how to manage state and onChange and class props\n    const isCardLoading: boolean = this.props.adapters.length === 0;\n    return (\n      <MyLayout>\n        {this.props.adapters.map((ad, index) => \n            <Card\n              title={ad.id}\n              bordered={true}\n              loading={isCardLoading}\n              style={{ margin: \"10px 10px\" }}\n              key={`card-${index}`}\n              hoverable\n            >\n              <pre>\n                • <b><u>Function Name</u></b>: {ad.id}<br/>\n                • <b><u>Description</u></b>: {ad.description}<br/>\n                • <b><u>Inputs</u></b>: {_.isEmpty(ad.inputs) ? <p>None</p> :Object.keys(ad.inputs).map((inputKey, idx) => (\n                  <p key={`input-${idx}`}>\n                    {inputKey}: Type: <input value={ad.inputs[inputKey].id} readOnly/>; Optional: <input value={JSON.stringify(ad.inputs[inputKey].optional)} readOnly/>\n                  </p>\n                ))}<br/>\n                • <b><u>Outputs</u></b>: {_.isEmpty(ad.outputs) ? <p>None</p> :Object.keys(ad.outputs).map((outputKey, idx) => (\n                  <p key={`input-${idx}`}>\n                    {outputKey}: Type: <input value={ad.outputs[outputKey].id} readOnly/>; Optional: <input value={JSON.stringify(ad.outputs[outputKey].optional)} readOnly/>\n                  </p>\n                ))}\n              </pre>\n            </Card>\n        )}\n      </MyLayout>\n  ); }\n}\n\nexport default AdapterComponent;\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { IStore } from \"../store\";\nimport { Link } from \"react-router-dom\";\nimport MyLayout from \"./Layout\";\nimport { Row, Col, Input, Menu, Button, Popover, Dropdown, Typography } from 'antd';\nimport { PipelineType } from \"../store/PipelineStore\";\nimport _ from \"lodash\";\nconst { Title } = Typography;\n\nconst { Search } = Input;\n\ninterface PipelineTimelineProps {\n  pipelines: PipelineType[],\n  getPipelines: () => any,\n}\ninterface PipelineTimelineState {}\n\n@inject((stores: IStore) => ({\n  pipelines: stores.pipelineStore.pipelines,\n  getPipelines: stores.pipelineStore.getPipelines\n}))\n@observer\nexport class PipelineTimelineComponent extends React.Component<\n  PipelineTimelineProps,\n  PipelineTimelineState\n> {\n  public state: PipelineTimelineState = {};\n\n  componentDidMount() {\n    this.props.getPipelines();\n  }\n\n  readonly timestampDropdownMenu = (\n    <Menu>\n      <Menu.Item>\n        Newest\n      </Menu.Item>\n      <Menu.Item>\n        Oldest\n      </Menu.Item>\n    </Menu>\n  );\n\n  readonly statusColorCode = {\n    running: \"orange\",\n    finished: \"green\",\n    failed: \"red\",\n  }\n\n  render() {\n    // FIXME: loading indicator, not null pipelines\n    return (\n      <MyLayout>\n        <React.Fragment>\n          <Row type=\"flex\" align=\"middle\" style={{ margin: \"20px 0\"}}>\n            <Col span={12}>\n              <Search\n                placeholder=\"input search text\"\n                onSearch={value => console.log(value)}\n                style={{ textAlign: \"left\" }}\n              />\n            </Col>\n            <Col span={8}/>\n            <Col span={2}>\n              <Dropdown\n                overlay={this.timestampDropdownMenu}\n              >\n                <Button\n                  type=\"link\" icon=\"down\"\n                  style={{ float: \"right\", color: \"black\" }}\n                >Sort</Button>\n              </Dropdown>\n            </Col>\n            <Col span={2}>\n              <Popover content=\"Create a new pipeline!\">\n                <Link to={\"/pipeline/create\"}>\n                  <Button\n                    type=\"primary\"\n                    shape=\"circle\"\n                    icon=\"plus\"\n                    // onClick={() => console.log(\"DOES NOTHING NOW!\")}\n                    style={{ float: \"right\", margin: \"0 25px\" }}\n                    size=\"large\"\n                  />\n                </Link>\n              </Popover>\n            </Col>\n          </Row>\n          {this.props.pipelines.map((pl, index) => <Row\n            key={`row-${index}`}\n            type=\"flex\" align=\"middle\"\n          >\n            <Col span={2} style={{ textAlign: \"right\" }}>\n              <Title\n                style={{\n                  color: `${_.get(this.statusColorCode, pl.status, \"black\")}`,\n                }}\n                level={4}\n              >{pl.status}</Title>\n            </Col>\n            <Col span={1}/>\n            <Col span={19}>\n              <Row style={{ margin: \"0 0\"}}>\n                <Title level={4}>\n                  <Link to={`/pipelines/${pl.id}`} style={{ color: \"black\" }}>\n                    {_.isEmpty(pl.name) ? \"Unnamed\" : pl.name}\n                  </Link>\n                </Title>\n              </Row>\n              <Row style={{ margin: \"0 0\"}}>\n                <p>{\n                  pl.end_timestamp === \"\"\n                  ? `Started at ${pl.start_timestamp}, still running`\n                  : `Started at ${pl.start_timestamp}, ended at ${pl.end_timestamp}`\n                }</p>\n              </Row>\n            </Col>\n            <Col span={2}>\n              <Button\n                type=\"danger\"\n                onClick={() => console.log(\"Doesn't do anything!\")}\n                disabled={pl.status !== \"running\"}\n                style={{ marginRight: \"10px\"}}\n              >STOP</Button>\n            </Col>\n          </Row>)}\n          { this.props.pipelines.length === 0 ?\n          <p style={{ textAlign: \"center\" }}\n          ><b>No pipeline to show :/</b></p> : null}\n        </React.Fragment>\n      </MyLayout>\n    );\n  }\n}\n\nexport default PipelineTimelineComponent;","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { IStore } from \"../store\";\nimport { PipelineType } from \"../store/PipelineStore\";\nimport { RouteComponentProps } from \"react-router\";\nimport MyLayout from \"./Layout\";\nimport { Card, Alert, Spin, Button, Modal } from \"antd\";\nimport _ from \"lodash\";\n\n\ntype PipelineProps = {\n  currentPipeline: PipelineType,\n  getPipeline: (pipelineId: string) => any,\n}\ninterface PipelineState {\n  openConfig: boolean,\n  openOutput: boolean,\n}\n\n@inject((stores: IStore) => ({\n  currentPipeline: stores.pipelineStore.currentPipeline,\n  getPipeline: stores.pipelineStore.getPipeline\n}))\n@observer\nexport class PipelineComponent extends React.Component<\n  PipelineProps & RouteComponentProps,\n  PipelineState\n> {\n  public state: PipelineState = {\n    openConfig: false,\n    openOutput: false,\n  };\n\n  componentDidMount () {\n    // @ts-ignore\n    this.props.getPipeline(this.props.match.params.pipelineId)\n  }\n\n  render() {\n    const { currentPipeline } = this.props;\n    if (currentPipeline === null) {\n        return <MyLayout></MyLayout>;\n    }\n    return (\n      <MyLayout>\n        { _.isEmpty(this.props.currentPipeline) ?\n          <Spin size=\"large\" style={{ textAlign: \"center\" }}>\n            <Alert\n              message=\"Loading pipeline details\"\n              description=\"Right now is really slow :/\"\n              type=\"info\"\n            />\n          </Spin> : <Card\n            title={currentPipeline.name}\n            bordered={true}\n            style={{ margin: \"5px 5px\", height: \"100%\" }}\n          >\n            <pre>\n              {/* {JSON.stringify(currentPipeline, undefined, 2)} */}\n              {/*{\n                \"config\": {\n                  \"adapters\": {\n                    \"my_read_func\": {\n                      \"adapter\": \"funcs.ReadFunc\",\n                      \"inputs\": {\n                        \"repr_file\": \"./wfp_food_prices_south-sudan.repr.yml\",\n                        \"resources\": \"./wfp_food_prices_south-sudan.csv\"\n                      }\n                    }\n                  },\n                  \"description\": \"Test description\",\n                  \"version\": \"1\"\n                },\n                \"description\": \"Test description\",\n                \"end_timestamp\": \"2020-01-15T18:27:45\",\n                \"id\": \"48b62deeb48d\",\n                \"name\": \"Test Name\",\n                \"output\": \"Importing TopoFlow 3.6 packages:\\n   topoflow.utils\\n   topoflow.utils.tests\\n   topoflow.components\\n   topoflow.components.tests\\n   topoflow.framework\\n   topoflow.framework.tests\\n \\nImporting TopoFlow 3.6 packages:\\n   topoflow.utils\\n   topoflow.utils.tests\\n   topoflow.components\\n   topoflow.components.tests\\n   topoflow.framework\\n   topoflow.framework.tests\\n \\nPaths for this package:\\nframework_dir = /ws/extra_libs/topoflow/framework/\\nparent_dir    = /ws/extra_libs/topoflow/\\nexamples_dir  = /ws/extra_libs/topoflow/examples/\\n__file__      = /ws/extra_libs/topoflow/framework/emeli.py\\n__name__      = topoflow.framework.emeli\\n \\n\",\n                \"start_timestamp\": \"2020-01-15T18:27:42\",\n                \"status\": \"finished\"\n              } */}\n              • <b><u>Pipeline ID</u></b>: {currentPipeline.id}<br/><br/>\n              • <b><u>Pipeline Name</u></b>: {currentPipeline.name}<br/><br/>\n              • <b><u>Description</u></b>: {currentPipeline.description}<br/><br/>\n              • <b><u>Start Timestamp</u></b>: {currentPipeline.start_timestamp}<br/><br/>\n              • <b><u>End Timestamp</u></b>: {currentPipeline.end_timestamp}<br/><br/>\n              • <b><u>Status</u></b>: {currentPipeline.status}<br/><br/>\n              • <b><u>Config</u></b>: <React.Fragment>\n                <Button\n                  type=\"primary\" size=\"small\"\n                  onClick={() => this.setState({ openConfig: true })}>\n                  Click Me To View\n                </Button>\n                <Modal\n                  title=\"Config\"\n                  visible={this.state.openConfig}\n                  onOk={() => this.setState({ openConfig: false })}\n                  onCancel={() => this.setState({ openConfig: false })}\n                >\n                  <pre>\n                    {JSON.stringify(currentPipeline.config, null, 2)}\n                  </pre>\n                </Modal>\n                </React.Fragment><br/><br/>\n              • <b><u>Output</u></b>: {currentPipeline.output ? <React.Fragment>\n                <Button\n                  type=\"primary\" size=\"small\"\n                  onClick={() => this.setState({ openOutput: true })}>\n                  Click Me To View\n                </Button>\n                <Modal\n                  title=\"Output\"\n                  visible={this.state.openOutput}\n                  onOk={() => this.setState({ openOutput: false })}\n                  onCancel={() => this.setState({ openOutput: false })}\n                >\n                  <pre>\n                    {currentPipeline.output.split(\"\\n\").map((op, idx) => (<p key={`output-${idx}`}>\n                      {op.trim()}\n                    </p>))}\n                  </pre>\n                </Modal>\n                </React.Fragment> : `None`}<br/><br/>\n            </pre>\n          </Card>\n        }\n      </MyLayout>\n    );\n  }\n}\n\nexport default PipelineComponent;","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport { IStore } from \"../store\";\nimport { message, Upload, Icon, Row, Button, Tabs, Input, Col, Dropdown, Menu } from \"antd\";\nimport MyLayout from \"./Layout\";\nimport { UploadedPipelineDataType, NodeType, EdgeType } from \"../store/PipelineStore\"\nimport \"antd/dist/antd.css\";\nimport { UploadFile, UploadChangeParam } from \"antd/lib/upload/interface\";\nimport { RouterProps } from \"react-router\";\nimport { flaskUrl, AdapterType } from \"../store/AdapterStore\";\nimport queryString from 'query-string';\nimport {\n  GraphView, INode, IEdge,\n} from \"react-digraph\";\nimport _ from \"lodash\";\nconst { TextArea } = Input;\nconst { TabPane } = Tabs;\n\nconst GraphConfig =  {\n  NodeTypes: {\n    empty: { // required to show empty nodes\n      typeText: \"wat\",\n      shapeId: \"#empty\", // relates to the type property of a node\n      shape: (\n        <symbol viewBox=\"0 0 50 50\" id=\"empty\" key=\"0\">\n          {/* <circle cx=\"50\" cy=\"50\" r=\"50\"></circle> */}\n          <rect x=\"0\" y=\"0\" height=\"50\" width=\"50\"/>\n        </symbol>\n      )\n    },\n  },\n  NodeSubtypes: {},\n  EdgeTypes: {\n    emptyEdge: {  // required to show empty edges\n      shapeId: \"#emptyEdge\",\n      shape: (\n        <symbol viewBox=\"0 0 50 50\" id=\"emptyEdge\" key=\"0\">\n          <circle cx=\"25\" cy=\"25\" r=\"8\" fill=\"currentColor\"> </circle>\n        </symbol>\n      )\n    }\n  }\n}\n\ninterface CreatePipelineProps extends RouterProps {\n  uploadedPipelineData: UploadedPipelineDataType | null,\n  graphCreated: boolean,\n  setUploadedPipelineData: (uploadedPipeline: UploadedPipelineDataType | null) => any,\n  setGraphCreated: (graphCreated: boolean) => any,\n  setUploadedPipelineFromDcat: (dcatId: string) => any,\n  location: Location,\n  createPipeline: (pipelineName: string, pipelineDescription: string, graphNodes: NodeType[], graphEdges: EdgeType[]) => any,\n  adapters: AdapterType[],\n  getAdapters: () => any,\n}\ninterface CreatePipelineState {\n  currentFileList: UploadFile[],\n  pipelineName: string,\n  pipelineDescription: string,\n  selected: string | null,\n  graphNodes: INode[],\n  graphEdges: IEdge[],\n  currentAction: string,\n  currentAdapter: string,\n  currentAdapterName: string,\n  currentToNode: string,\n  fromNodeOutput: string,\n  toNodeInput: string,\n}\n\n@inject((stores: IStore) => ({\n  uploadedPipelineData: stores.pipelineStore.uploadedPipelineData,\n  graphCreated: stores.pipelineStore.graphCreated,\n  location: stores.routing.location,\n  createPipeline: stores.pipelineStore.createPipeline,\n  setGraphCreated: stores.pipelineStore.setGraphCreated,\n  setUploadedPipelineData: stores.pipelineStore.setUploadedPipelineData,\n  setUploadedPipelineFromDcat: stores.pipelineStore.setUploadedPipelineFromDcat,\n  adapters: stores.adapterStore.adapters,\n  getAdapters: stores.adapterStore.getAdapters,\n}))\n@observer\nexport class CreatePipelineComponent extends React.Component<\n  CreatePipelineProps,\n  CreatePipelineState\n> {\n  public state: CreatePipelineState = {\n    currentFileList: [],\n    pipelineName: \"\",\n    pipelineDescription: \"\",\n    selected: null,\n    graphNodes: [],\n    graphEdges: [],\n    currentAction: \"\",\n    currentAdapter: \"\",\n    currentToNode: \"\",\n    fromNodeOutput: \"\",\n    toNodeInput: \"\",\n    currentAdapterName: \"\"\n  };\n\n  componentDidMount() {\n    if (this.props.location.search) {\n      const params = queryString.parse(this.props.location.search)\n      if (params && params.dcatId && typeof params.dcatId === \"string\") {\n        this.props.setUploadedPipelineFromDcat(params.dcatId)\n      }\n    } else {\n      // redirect to create page to upload\n      this.props.history.push('/pipeline/create');\n    }\n    this.props.getAdapters();\n  }\n\n  componentDidUpdate(prevProps: CreatePipelineProps) {\n    if (\n      // Integration with dcat\n      prevProps.uploadedPipelineData !== this.props.uploadedPipelineData\n      && this.props.uploadedPipelineData !== null\n    ) {\n      this.setState({\n        graphNodes: this.createGraphNodes(this.props.uploadedPipelineData.nodes),\n        graphEdges: this.createGraphEdges(this.props.uploadedPipelineData.edges),\n      });\n    }\n  }\n\n  handleFileChange = (info: UploadChangeParam<UploadFile>) => {\n    const fileList = [...info.fileList];\n    const file = fileList.slice(-1)[0];\n    if (file.response && file.response.error) {\n      message.info(`${file.response.error}`);\n    } else if (file.response && file.response.data) {\n      const { data } = file.response;\n      // this.props.setUploadedPipelineData(data);\n      this.props.setGraphCreated(true);\n      this.setState({\n        graphEdges: this.createGraphEdges(data.edges),\n        graphNodes: this.createGraphNodes(data.nodes),\n      })\n    }\n    this.setState({ currentFileList: [file] });\n  }\n\n  handleSubmit = () => {\n    const { pipelineName, pipelineDescription, graphEdges, graphNodes } = this.state;\n    this.props.createPipeline(\n      pipelineName, pipelineDescription,\n      this.createNodes(graphNodes), this.createEdges(graphEdges)\n    );\n    this.props.setUploadedPipelineData(null);\n    this.props.setGraphCreated(false);\n    this.props.history.push('/pipelines');\n  }\n\n  handleCancel = () => {\n    this.props.setUploadedPipelineData(null);\n    this.props.setGraphCreated(false);\n    this.setState({\n      currentFileList: [],\n      pipelineName: \"\",\n      pipelineDescription: \"\",\n      selected: null,\n      graphNodes: [],\n      graphEdges: [],\n      currentAction: \"\",\n      currentAdapter: \"\",\n      currentToNode: \"\",\n      fromNodeOutput: \"\",\n      toNodeInput: \"\",\n      currentAdapterName: \"\"\n    });\n    this.props.history.push('/pipeline/create');\n  }\n\n  createGraphNodes = (nodes: NodeType[]) => {\n    return nodes.map((n, idx) => {\n      const title = n.adapter.split(\".\")[1];\n      const currAdapter = this.props.adapters.filter(ad => ad.id === title)[0];\n      return ({\n        id: n.id,\n        title: title,\n        // type: \"empty\",\n        x: 100 + 200*idx,\n        y: 100,\n        adapter: {\n          id: title,\n          description: currAdapter.description,\n          inputs: n.inputs,\n          outputs: n.outputs\n        }\n      });\n    })\n  }\n\n  createNodes = (nodes: INode[]) => {\n    return nodes.map(n => ({\n      id: n.id,\n      adapter: `funcs.${n.title}`,\n      inputs: n.adapter.inputs,\n      outputs: n.adapter.outputs,\n      // FIXME: missing comment\n    }))\n  }\n\n  findBoundingBoxGraphNodes = () => {\n    const { graphNodes } = this.state;\n    var maxX = Number.NEGATIVE_INFINITY, maxY = Number.NEGATIVE_INFINITY;\n    var minX = Number.POSITIVE_INFINITY, minY = Number.POSITIVE_INFINITY;\n    var maxId = -1;\n    for (var i = 0; i < graphNodes.length; i++) {\n      const nodeX = Number(graphNodes[i].x);\n      const nodeY = Number(graphNodes[i].y);\n      if (i > maxId) {\n        maxId = i;\n      }\n      if (nodeX > maxX) {\n        maxX = nodeX;\n      }\n      if (nodeX < minX) {\n        minX = nodeX;\n      }\n      if (nodeY > maxY) {\n        maxY = nodeY;\n      }\n      if (nodeY < minY) {\n        minY = nodeY;\n      }\n    }\n    if (maxId < 0) {\n      maxX = 300;\n      maxY = 300;\n      minX = 300;\n      minY = 300;\n    }\n    return { maxX, maxY, minX, minY, maxId }\n  }\n\n  createGraphEdges = (edges: EdgeType[]) => {\n    return edges.map(e => ({\n      ...e,\n      type: \"emptyEdge\",\n    }))\n  }\n\n  createEdges = (edges: IEdge[]) => {\n    return edges.map(e => ({\n      source: e.source,\n      target: e.target,\n      input: e.input,\n      output: e.output,\n    }))\n  }\n\n  onUpdateNode = (node: INode) => {\n    this.setState({\n      selected: node.id,\n      graphNodes: this.state.graphNodes.map(v => v.id === node.id ? node : v)\n    });\n  };\n\n  createAdapterMenu = () => {\n    return (<Menu onClick={({ item }) => {\n      this.setState({ currentAdapter: item.props.children });\n      }}>\n      {this.props.adapters.map((ad, idx) => {\n        return (<Menu.Item key={`ad-${idx}`}>\n          {ad.id}\n        </Menu.Item>);\n      })}\n    </Menu>);\n  };\n\n  createFromNodeOutputMenu = () => {\n    const selectedAdapter = this.state.graphNodes.filter(n => n.id === this.state.selected)[0].adapter;\n    return (<Menu onClick={({ item }) => {\n      this.setState({ fromNodeOutput: item.props.children });\n      }}>\n      {Object.keys(selectedAdapter.outputs).map((k, idx) => {\n        return (<Menu.Item key={`output-${idx}`}>\n          {k}\n        </Menu.Item>);\n      })}\n    </Menu>);\n  };\n\n  createToNodeMenu = () => {\n    return (<Menu onClick={({ item }) => {\n      this.setState({ currentToNode: item.props.children });\n      }}>\n      {this.state.graphNodes.filter(n => n.id !== this.state.selected).map((node, idx) => {\n        return (<Menu.Item key={`${idx}`}>\n          {node.id}\n        </Menu.Item>);\n      })}\n    </Menu>);\n  };\n\n  createToNodeInputMenu = () => {\n    const selectedAdapter = this.state.graphNodes.filter(n => n.id === this.state.currentToNode)[0].adapter;\n    return (<Menu onClick={({ item }) => {\n      this.setState({ toNodeInput: item.props.children });\n      }}>\n      {Object.keys(selectedAdapter.inputs).map((k, idx) => {\n        return (<Menu.Item key={`input-${idx}`}>\n          {k}\n        </Menu.Item>);\n      })}\n    </Menu>);\n  };\n\n  createNodeEdgeMenu = () => {\n    const nodeEdges = this.state.graphEdges.filter(\n      e => e.source === this.state.selected || e.target === this.state.selected\n    );\n    return (<Menu onClick={({ key }) => {\n        const updates = key.split(\"-\");\n        this.setState({\n          selected: updates[0],\n          fromNodeOutput: updates[1],\n          currentToNode: updates[2],\n          toNodeInput: updates[3]\n        });\n      }}>\n      {\n      nodeEdges.map((e, idx) => {\n        return (<Menu.Item key={`${e.source}-${e.output}-${e.target}-${e.input}`}>\n          {`${e.source}.${e.output} => ${e.target}.${e.input}`}\n        </Menu.Item>);\n      })}\n    </Menu>);\n  };\n\n  onClear = () => {\n    this.setState({\n      selected: null,\n      currentAction: \"\",\n      currentAdapter: \"\",\n      currentToNode: \"\",\n      toNodeInput: \"\",\n      fromNodeOutput: \"\",\n      currentAdapterName: \"\"\n    });\n  }\n\n  isAlphaNumericUnderscore = (check: string) => {\n    const subStrings = check.split(\"_\");\n    for (var i = 0; i < subStrings.length; i++){\n      if (subStrings[i].match(/^[0-9a-zA-Z]+$/g) === null) { return false; }\n    }\n    return true;\n  }\n\n  render() {\n    const { graphCreated } = this.props;\n    const selectedNode = this.state.graphNodes.filter(n => n.id === this.state.selected);\n    const selectedAdapter = _.get(\n      selectedNode[0], \"adapter\"\n    );\n\n    if (!graphCreated) {\n      return <MyLayout>\n        <Col span={12} style={{ textAlign: \"center\", height: \"100%\" }}>\n          <Button size=\"large\" type=\"primary\" icon=\"plus\"\n            onClick={() => this.props.setGraphCreated(true)}\n            style={{ marginTop: \"30vh\" }}\n          >Click To Start</Button>\n        </Col>\n        <Col span={12} style={{ height: \"100%\" }}>\n          <Upload.Dragger\n            name=\"files\"\n            action={`${flaskUrl}/pipeline/upload_config`}\n            accept=\".json,.yml\"\n            onChange={this.handleFileChange}\n            multiple={false}\n            fileList={this.state.currentFileList}\n            style={{ height: \"100%\" }}\n          >\n            <p className=\"ant-upload-drag-icon\">\n              <Icon type=\"inbox\" />\n            </p>\n            <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\n            <p className=\"ant-upload-hint\">Support for single upload.</p>\n          </Upload.Dragger>\n        </Col>\n      </MyLayout>\n    } else {\n      return (\n        <MyLayout> \n          <Tabs\n            defaultActiveKey=\"adapters\"\n            // tabPosition=\"left\"\n            style={{ overflowY: \"auto\", height: \"100%\" }}\n          >\n            <TabPane tab=\"Adapters\" key=\"adapters\" style={{ height: \"600px\" }}>\n              <Row style={{ margin: \"20px 0px\"}}>\n                <Col span={16}>\n                  { _.isEmpty(this.state.selected) && _.isEmpty(this.state.currentAction) ?\n                    <p>\n                      <b>* Click on node to edit</b> OR <Button\n                        style={{ margin: \"5px\" }}\n                        onClick={() => this.setState({ currentAction: \"add-a-new-node\"})}\n                      >Add A New Node</Button>\n                    </p>\n                    : null\n                  }\n                  { this.state.selected && _.isEmpty(this.state.currentAction) ? <span>\n                    <p>{`Select an action on ${this.state.selected}: `}</p>\n                    <Button\n                      style={{ margin: \"5px\" }}\n                      onClick={() => this.setState({ currentAction: \"add-a-new-node\"})}\n                    >Add A New Node</Button>\n                    <Button\n                      style={{ margin: \"5px\" }}\n                      onClick={() => this.setState({ currentAction: \"add-a-new-edge\"})}\n                    >Add A New Edge</Button>\n                    <Button\n                      style={{ margin: \"5px\" }}\n                      onClick={() => this.setState({ currentAction: \"delete-this-node\"})}\n                    >Delete This Node</Button>\n                    <Button\n                      style={{ margin: \"5px\" }}\n                      onClick={() => this.setState({ currentAction: \"delete-its-edge\"})}\n                    >Delete Its Edge</Button>\n                    <Button\n                      style={{ margin: \"5px\" }}\n                      onClick={() => this.setState({ selected: null })}\n                      type=\"dashed\"\n                    >Cancel</Button>\n                  </span> : null}\n                  { this.state.currentAction === \"add-a-new-node\"\n                    ? <span>\n                      <p>Add A New Node: </p>\n                      <Dropdown overlay={this.createAdapterMenu()}>\n                        { this.state.currentAdapter\n                        ? <b>{`Selected Adapter: ${this.state.currentAdapter}`}</b>\n                        : <Button><b>Select An Adapter</b></Button>}\n                      </Dropdown>\n                      { this.state.currentAdapter ? <p>\n                        Enter adapter name (Please only use \"_\" as delimiter):\n                        <input\n                          style={{ margin: \"10px\" }}\n                          value={this.state.currentAdapterName}\n                          onChange={({ target }) => this.setState({ currentAdapterName: target.value })}\n                        /> \n                      </p> : null}\n                      <Button\n                        style={{ float: \"right\", margin: \"5px\" }}\n                        disabled={_.isEmpty(this.state.currentAdapter) || !this.isAlphaNumericUnderscore(this.state.currentAdapterName)}\n                        onClick={() => {\n                          console.log(\"adding a new node to the graph\");\n                          const { maxX, maxY, minX, minY, maxId } = this.findBoundingBoxGraphNodes();\n                          const customName = this.state.currentAdapterName ? this.state.currentAdapterName : `Node-${maxId + 1}`;\n                          const newNode: INode = {\n                            id: customName,\n                            title: `${this.state.currentAdapter}`,\n                            // type: \"empty\",\n                            x: 300 + (maxX + minX)/2,\n                            y: (maxY + minY)/2,\n                            adapter: this.props.adapters.filter(ad => ad.id === this.state.currentAdapter)[0]\n                          };\n                          const newNodes = this.state.graphNodes;\n                          newNodes.push(newNode);\n                          this.setState({\n                            graphNodes: newNodes,\n                            selected: null,\n                            currentAction: \"\",\n                            currentAdapter: \"\",\n                            currentAdapterName: \"\"\n                          });\n                        }}\n                        type=\"primary\"\n                      >OK</Button>\n                      <Button\n                        style={{ float: \"right\", margin: \"5px\" }}\n                        onClick={this.onClear}\n                      >Clear</Button>\n                    </span> : null\n                  }\n                  { this.state.currentAction === \"add-a-new-edge\"\n                    ? <span>\n                      <p>\n                        {`Add A New Edge From ${this.state.selected} `}\n                        <Dropdown overlay={this.createFromNodeOutputMenu()}>\n                          { this.state.fromNodeOutput\n                          ? <b>{ `${this.state.fromNodeOutput}`}</b>\n                          : <Button><b>Select Node Output</b></Button>}\n                        </Dropdown>\n                        {` To `}\n                        <Dropdown overlay={this.createToNodeMenu()}>\n                          { this.state.currentToNode\n                          ? <b>{` ${this.state.currentToNode}` }</b>\n                          : <Button><b>Select Node Output</b></Button>}\n                        </Dropdown>\n                        {`   `}\n                        { _.isEmpty(this.state.currentToNode) ? null : <Dropdown overlay={this.createToNodeInputMenu()}>\n                          { this.state.toNodeInput\n                          ? <b>{ `${this.state.toNodeInput}`}</b>\n                          : <Button><b>Select Node Input</b></Button>}\n                        </Dropdown>}\n                        <Button\n                          style={{ float: \"right\", margin: \"5px\" }}\n                          disabled={_.isEmpty(this.state.toNodeInput)}\n                          onClick={() => {\n                            console.log(\"adding a new edge to the graph\");\n                            // FIXME: should we update node fields as well?\n                            const newEdges = this.state.graphEdges;\n                            newEdges.push({\n                              target: this.state.currentToNode,\n                              source: this.state.selected || \"\",\n                              type: \"empty\",\n                              input: this.state.toNodeInput,\n                              output: this.state.fromNodeOutput\n                            });\n                            this.setState({\n                              graphEdges: newEdges,\n                              selected: null,\n                              currentAction: \"\",\n                              currentAdapter: \"\",\n                              currentToNode: \"\",\n                              toNodeInput: \"\",\n                              fromNodeOutput: \"\"\n                            });\n                          }}\n                          type=\"primary\"\n                        >OK</Button>\n                        <Button\n                          style={{ float: \"right\", margin: \"5px\" }}\n                          onClick={this.onClear}\n                        >Clear</Button>\n                      </p>\n                    </span> : null\n                  }\n                  { this.state.currentAction === \"delete-this-node\"\n                    ? <span>\n                      <p>Are you sure you want to delete this node? All inputs/edges of this node will be lost.</p>\n                      <Button\n                        style={{ float: \"right\", margin: \"5px\" }}\n                        type=\"danger\"\n                        onClick={() => {\n                          console.log(\"deleting this node in the graph\");\n                          const { selected } = this.state;\n                          const newNodes = this.state.graphNodes.filter(n => n.id !== selected);\n                          const newEdges = this.state.graphEdges.filter(e => e.target !== selected && e.source !== selected );\n                          this.setState({\n                            graphEdges: newEdges,\n                            graphNodes: newNodes,\n                            selected: null,\n                            currentAction: \"\",\n                            currentAdapter: \"\"\n                          })\n                        }}\n                      >Yes</Button>\n                      <Button\n                        style={{ float: \"right\", margin: \"5px\" }}\n                        onClick={this.onClear}\n                        type=\"primary\"\n                      >No</Button>\n                    </span> : null\n                  }\n                  { this.state.currentAction === \"delete-its-edge\"\n                    ? <span>\n                      <p>{`Select An Edge From ${this.state.selected}:`} </p>\n                      <Dropdown overlay={this.createNodeEdgeMenu()}>\n                        { this.state.currentToNode\n                        ? <b>{\n                          `Deleting The Edge From ${this.state.selected}.${this.state.fromNodeOutput}\n                           To ${this.state.currentToNode}.${this.state.toNodeInput}`}</b>\n                        : <Button><b>Select Node Edges</b></Button>}\n                      </Dropdown>\n                      <Button\n                        style={{ float: \"right\", margin: \"5px\" }}\n                        type=\"danger\"\n                        onClick={() => {\n                          console.log(\"deleting this node in the graph\");\n                          const { selected, currentToNode, fromNodeOutput, toNodeInput } = this.state;\n                          // FIXME: should we update graphNodes as well?\n                          const newEdges = this.state.graphEdges.filter(\n                            e => e.target !== currentToNode || e.source !== selected\n                            || e.input !== toNodeInput || e.output !== fromNodeOutput\n                          );\n                          this.setState({\n                            graphEdges: newEdges,\n                            selected: null,\n                            currentAction: \"\",\n                            currentAdapter: \"\",\n                            currentToNode: \"\"\n                          })\n                        }}\n                        disabled={this.state.currentToNode === \"\"}\n                      >Yes</Button>\n                      <Button\n                        style={{ float: \"right\", margin: \"5px\" }}\n                        onClick={this.onClear}\n                        type=\"primary\"\n                      >No</Button>\n                    </span> : null\n                  }\n                </Col>\n                <Col span={8}>\n                  <Button\n                    key=\"discard\" onClick={this.handleCancel}\n                    style={{ margin: \"10px\", float: \"right\" }}\n                  >\n                    Discard\n                  </Button>\n                  <Button\n                    key=\"submit\" type=\"primary\"\n                    onClick={this.handleSubmit}\n                    style={{ margin: \"10px\", float: \"right\" }}\n                  >\n                    Submit\n                  </Button>\n                </Col>\n              </Row>\n              <Row>\n                <Col span={!_.isEmpty(selectedAdapter) ? 16 : 24} style={{ height: \"50vh\" }}>\n                  <GraphView\n                    ref='GraphView'\n                    nodeKey=\"id\"\n                    nodes={this.state.graphNodes}\n                    edges={this.state.graphEdges}\n                    selected={{}}\n                    nodeTypes={GraphConfig.NodeTypes}\n                    nodeSubtypes={GraphConfig.NodeSubtypes}\n                    edgeTypes={GraphConfig.EdgeTypes}\n                    // onSelectNode={this.onSelectNode}\n                    // onCreateNode={this.onCreateNode}\n                    onUpdateNode={this.onUpdateNode}\n                    // onDeleteNode={this.onDeleteNode}\n                    // onSelectEdge={this.onSelectEdge}\n                    // onCreateEdge={this.onCreateEdge}\n                    // onSwapEdge={this.onSwapEdge}\n                    // onDeleteEdge={this.onDelet() => console.log(\"does nothing\")\n                    onSelectNode={() => console.log(\"does nothing\")}\n                    onCreateNode={() => console.log(\"does nothing\")}\n                    // onUpdateNode={() => console.log(\"does nothing\")}\n                    onDeleteNode={() => console.log(\"does nothing\")}\n                    onSelectEdge={() => console.log(\"does nothing\")}\n                    onCreateEdge={() => console.log(\"does nothing\")}\n                    onSwapEdge={() => console.log(\"does nothing\")}\n                    onDeleteEdge={() => console.log(\"does nothing\")}\n                    renderNodeText={(data: any, id: string | number, isSelected: boolean) => {\n                      const { title } = data;\n                      const lineOffset = 18;\n                      if (typeof id !== \"string\") {\n                        return;\n                      }\n                      const customName = id.split(\"-\")[1];\n                      return (\n                        <text textAnchor=\"middle\" x={0} y={0} fontSize=\"smaller\">\n                          {!!title && <tspan x={0} dy={-lineOffset} opacity=\"1\">{title}</tspan>}\n                          {!!customName && <tspan x={0} dy={2 * lineOffset} opacity=\"1\">{customName}</tspan>}\n                        </text>\n                      );\n                    }}\n                    renderNode={({ selected }) => {\n                      return (\n                        <g className=\"shape\" height={100} width={100}>\n                          <rect\n                            x={-50}\n                            y={-50}\n                            width={100}\n                            height={100}\n                            fill=\"#D9EE87\"\n                            fillOpacity=\"1\"\n                          />\n                        </g>\n                      );\n                    }}\n                    maxZoom={1}\n                  />\n                </Col>\n                <Col span={!_.isEmpty(selectedAdapter) ? 8 : 1}>\n                  { !_.isEmpty(selectedAdapter) ?\n                  <React.Fragment>\n                    <p style={{ margin: \"20px 20px\"}}>\n                      • <b><u>Function Name</u></b>: {selectedAdapter.id}<br/>\n                      • <b><u>Description</u></b>: {selectedAdapter.description}<br/>\n                    </p>\n                    <p style={{ margin: \"20px 20px\"}}><b>Inputs to adapter: </b></p>\n                    <form>\n                      {Object.keys(selectedAdapter.inputs).map((ip, idx) => {\n                        if (selectedAdapter.inputs[ip].id === \"graph\") {\n                          const wiredEdges = this.state.graphEdges.filter(e => e.target === this.state.selected && e.input === \"graph\");\n                          return <p key={`input-${idx}`} style={{ margin: \"20px 20px\"}}>\n                            {`${ip}: `}\n                            <input\n                              disabled={true}\n                              type=\"text\"\n                              value={\n                                _.isEmpty(wiredEdges) ? \"Only Changeable By Editing Edges\"\n                                : `${wiredEdges[0].source}.${wiredEdges[0].output}`\n                              }\n                              style={{\n                                padding:\"5px\",\n                                border:\"2px solid\",\n                                borderRadius: \"5px\",\n                                width: \"100%\"\n                              }}\n                            />\n                          </p>\n                        }\n                        return (\n                          <p key={`input-${idx}`} style={{ margin: \"20px 20px\"}}>\n                            {`${ip}: `}\n                            <input\n                              name={ip}\n                              type=\"text\"\n                              required={selectedAdapter.inputs[ip].optional}\n                              value={selectedAdapter.inputs[ip].val || \"\"}\n                              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                                const { currentTarget } = event;\n                                var newNodes = this.state.graphNodes;\n                                var newNode = newNodes.filter(n => n.id === this.state.selected)[0];\n                                newNode.adapter.inputs[currentTarget.name].val = currentTarget.value;\n                                this.setState({ graphNodes: newNodes });\n                              }}\n                              style={{\n                                padding:\"5px\",\n                                border:\"2px solid\",\n                                borderRadius: \"5px\",\n                                width: \"100%\"\n                              }}\n                            />\n                          </p>\n                        );\n                      })}\n                    </form>\n                    <p style={{ margin: \"20px 20px\"}}><b>Wiring of this adapter:</b></p>\n                    {this.state.graphEdges.filter(e => e.source === this.state.selected || e.target === this.state.selected)\n                    .map((e, idx) => {\n                      return (<p style={{ margin: \"20px 20px\"}} key={`edge-${idx}`}>\n                        • {`${e.source}`}.{e.output} <b>=></b> {`${e.target}`}.{e.input}\n                      </p>);\n                    })}\n                  </React.Fragment>\n                  : null}\n                </Col>\n              </Row>\n              {/* <pre>{JSON.stringify(uploadedPipelineData, null, 2)}</pre> */}\n            </TabPane>\n            <TabPane tab=\"Metadata\" key=\"metadata\">\n              <Row style={{ margin: \"20px 0px\"}}>\n                <Col span={16}>\n                  <Input\n                    value={this.state.pipelineName}\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => this.setState({ pipelineName: event.target.value})}\n                    placeholder=\"Enter Pipeline Name\"\n                    style={{ margin: \"10px\" }}\n                  />\n                </Col>\n                <Col span={8}>\n                  <Button\n                    key=\"discard\" onClick={this.handleCancel}\n                    style={{ margin: \"10px\", float: \"right\" }}\n                  >\n                    Discard\n                  </Button>\n                  <Button\n                    key=\"submit\" type=\"primary\"\n                    onClick={this.handleSubmit}\n                    style={{ margin: \"10px\", float: \"right\" }}\n                  >\n                    Submit\n                  </Button>\n                </Col>\n              </Row>\n              <Row style={{ margin: \"20px 10px\"}}>\n                <TextArea\n                  rows={16}\n                  value={this.state.pipelineDescription}\n                  onChange={({ target }) => this.setState({ pipelineDescription: target.value})}\n                  placeholder=\"Enter Pipeline Description\"\n                />\n              </Row>\n              {/* <Row style={{ margin: \"20px 10px\"}}>\n                <pre>{JSON.stringify(uploadedPipelineConfig, null, 2)}</pre>\n              </Row> */}\n            </TabPane>\n          </Tabs>\n        </MyLayout>\n      );\n    }\n  }\n}\n\nexport default CreatePipelineComponent;\n","import React from \"react\";\nimport { inject, observer } from \"mobx-react\";\nimport {\n  Route,\n  BrowserRouter,\n  Switch\n} from \"react-router-dom\";\nimport { IStore } from \"./store\";\nimport NotFound404 from \"./components/NotFound404\";\nimport Home from \"./components/Home\";\nimport Adapters from \"./components/Adapters\";\n// import LoadingComponent from \"./components/Loading\";\nimport PipelineTimeline from \"./components/PipelineTimeline\";\nimport PipelineDetail from \"./components/PipelineDetail\";\nimport CreatePipeline from \"./components/CreatePipeline\";\nimport \"./App.css\";\n\ninterface Props {}\n\n@inject((stores: IStore) => ({\n  routing: stores.routing,\n  pipelineStore: stores.pipelineStore,\n  adapterStore: stores.adapterStore,\n}))\n@observer\nexport default class App extends React.Component<Props> {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/adapters\" component={Adapters} />\n          <Route exact path=\"/pipelines\" component={PipelineTimeline} />\n          <Route path='/pipelines/:pipelineId' component={PipelineDetail}/>\n          <Route exact path=\"/pipeline/create\" component={CreatePipeline} />\n          <Route component={NotFound404} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n","import \"antd/dist/antd.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"mobx-react\";\nimport { Router } from \"react-router\";\nimport { stores, history } from \"./store\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\n\n// FIXME: react context, provider and app type error\nReactDOM.render(\n  <Provider {...stores} >\n    <Router history={history}>\n      <App/>\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}